{"version":3,"sources":["reportWebVitals.js","useChatRoom.jsx","Room.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NEW_MESSAGE_EVENT","SOCKET_SERVER_URL","process","useChatRoom","useState","messages","setMessages","Set","users","setUsers","socketRef","useRef","useEffect","current","socketIOClient","on","message","incomingMessage","isOwner","senderId","id","forEach","ele","delete","body","name","system","disconnect","sendMessage","messageBody","userName","Array","from","filter","length","emit","createUser","Input","tw","input","url","Room","useChat","loggedIn","setLoggedIn","newMessage","setNewMessage","FEN","setFEN","black","setBlack","white","setWhite","setUserName","messageRef","listening","setListening","logged","setLogged","createPlayerNames","user","setPlayer","title","rating","scrollIntoView","behavior","EventSource","onmessage","event","parsedData","JSON","parse","data","d","fen","players","className","position","transitionDuration","showNotation","calcWidth","size","screenWidth","screenHeight","screen","width","map","i","type","label","placeholder","variant","value","onChange","target","onKeyUp","key","disabled","color","onClick","onSubmit","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAYeA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wECJRQ,EAAoB,oBACpBC,EAAiB,kBAAcC,UA8DtBC,EA5DK,WAClB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,mBAAS,IAAIG,KAAvC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAYC,mBAElBC,qBAAU,WA0BR,OAzBAF,EAAUG,QAAUC,IAAeb,GACnCS,EAAUG,QAAQE,GAAGf,GAAmB,SAACgB,GACvC,IAAMC,EAAe,2BAChBD,GADgB,IAEnBE,QAASF,EAAQG,WAAaT,EAAUG,QAAQO,KAElDd,GAAY,SAACD,GAAD,4BAAkBA,GAAlB,CAA4BY,UAE1CP,EAAUG,QAAQE,GAAG,cAAc,WACjCP,EAAMa,SAAQ,SAACC,GACTA,EAAIF,KAAOV,EAAUG,QAAQO,KAC/BZ,EAAMe,OAAOD,GACbb,EAASD,GACTF,GAAY,SAACD,GAAD,4BACPA,GADO,CAEV,CACEmB,KAAK,GAAD,OAAKd,EAAUG,QAAQY,KAAvB,iBACJN,SAAUT,EAAUG,QAAQO,GAC5BK,KAAM,GACNC,QAAQ,eAMX,WACLhB,EAAUG,QAAQc,gBAEnB,IAuBH,MAAO,CAAEtB,WAAUuB,YArBC,SAACC,EAAaH,GAChC,IAAII,EAAWC,MAAMC,KAAKxB,GAAOyB,QAC/B,SAACX,GAAD,OAASA,EAAIF,KAAOV,EAAUG,QAAQO,MAEpCU,EAASI,SACXJ,EAAWA,EAAS,IAEtBpB,EAAUG,QAAQsB,KAAKnC,EAAmB,CACxCwB,KAAMK,EACNV,SAAUT,EAAUG,QAAQO,GAC5BK,KAAMK,EAASL,KACfC,OAAQA,KAUoBU,WANb,SAACX,GAClBhB,GACE,SAACD,GAAD,OAAW,IAAID,IAAJ,sBAAYC,GAAZ,CAAmB,CAAEiB,KAAMA,EAAML,GAAIV,EAAUG,QAAQO,a,OCtD3DiB,EAAQC,IAAGC,MAAK,ovBAuCvBC,GAzBuBF,YAAGD,EAAHC,CAAS,+DAyB7B,kBAAcpC,SAAd,eA8MMuC,EA5MF,WACX,MAMIC,IALFrC,EADF,EACEA,SACAuB,EAFF,EAEEA,YACAQ,EAHF,EAGEA,WAIF,GAPA,EAIEO,SAJF,EAKEC,YAEkCxC,mBAAS,KAA7C,mBAAOyC,EAAP,KAAmBC,EAAnB,KACA,EAAsB1C,mBAAS,IAA/B,mBAAO2C,EAAP,KAAYC,EAAZ,KACA,EAA0B5C,mBAAS,IAAnC,mBAAO6C,EAAP,KAAcC,EAAd,KACA,EAA0B9C,mBAAS,IAAnC,mBAAO+C,EAAP,KAAcC,EAAd,KACA,EAAgChD,mBAAS,IAAzC,mBAAO0B,EAAP,KAAiBuB,EAAjB,KACMC,EAAa3C,mBACnB,EAAkCP,oBAAS,GAA3C,mBAAOmD,EAAP,KAAkBC,EAAlB,KACA,EAA4BpD,oBAAS,GAArC,mBAAOqD,EAAP,KAAeC,EAAf,KAsBMC,EAAoB,SAACC,EAAMC,GAE3BD,EAAKA,KAAKnC,MAMZoC,EALID,EAAKA,KAAKE,MACDF,EAAKA,KAAKE,MAAQ,IAAMF,EAAKA,KAAKnC,KAAO,IAAMmC,EAAKG,OAEpDH,EAAKA,KAAKnC,KAAO,IAAMmC,EAAKG,SAiC7C,OA3BAnD,qBAAU,kBAAM0C,EAAWzC,QAAQmD,eAAe,CAAEC,SAAU,cAE9DrD,qBAAU,WACH2C,IACY,IAAIW,YAAY1B,GACxB2B,UAAY,SAACC,GAClB,IAAMC,EAAaC,KAAKC,MAAMH,EAAMI,MACpCxB,EAAO,CAACqB,EAAWI,EAAEC,MACjBL,EAAWI,EAAEE,UACfhB,EAAkBU,EAAWI,EAAEE,QAAQ,GAAIvB,GAC3CO,EAAkBU,EAAWI,EAAEE,QAAQ,GAAIzB,GAC3CtB,EAAY,GAAD,OACNyC,EAAWI,EAAEE,QAAQ,GAAGf,KAAKnC,KADvB,wBAC2C4C,EAAWI,EAAEE,QAAQ,GAAGf,KAAKnC,KADxE,aAET,GAEE4C,EAAWI,EAAErD,IACfQ,EAAY,2CAAD,OACkCyC,EAAWI,EAAErD,KACxD,KAKRoC,GAAa,MAEd,CAACD,EAAWR,IAGb,qBAAK6B,UAAU,qEAAf,SACE,sBAAKA,UAAU,+EAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,sBAAKA,UAAU,yEAAf,kBACQ7B,KAER,sBAAK6B,UAAU,SAAf,UACE,qBAAKA,UAAU,kDAAf,SACG3B,IAEH,qBAAK2B,UAAU,SAAf,SACE,cAAC,IAAD,CACEC,SAAU9B,EAAI,GACd+B,mBAAoB,IACpBC,cAAc,EACdC,UAAW,SAACC,GAAD,OACTA,EAAKC,YAAc,KACdD,EAAKE,aAAe,IAAO,GAC5BF,EAAKC,YAAc,KAClBD,EAAKE,aAAe,IAAO,GAC3BC,OAAOC,MAAQ,IAAO,SAIjC,sBAAKT,UAAU,kDAAf,UACG,IACAzB,WAIP,qBAAKyB,UAAU,+GAAf,SACE,sBAAKA,UAAU,mCAAf,WACc,IAAXnB,EACC,qCACE,6BACGpD,EAASiF,KAAI,SAACtE,EAASuE,GAAV,OACZ,8BACsB,IAAnBvE,EAAQU,OACP,qBAAKkD,UAAU,oCAAf,SACG5D,EAAQQ,OAGX,uBAAMoD,UAAU,oCAAhB,UACG5D,EAAQS,KACP,sBAAKmD,UAAU,kCAAf,UACG5D,EAAQS,KADX,OAIA,mCAAG,KAEJT,EAAQQ,SAdN+D,QAoBb,sBAAKX,UAAU,0CAAf,UACE,uBACEA,UAAU,8FACVxD,GAAG,UACHoE,KAAK,OACLC,MAAM,UACNC,YAAY,qBACZC,QAAQ,WACRC,MAAO/C,EACPgD,SA7Ha,SAACzB,GAC9BtB,EAAcsB,EAAM0B,OAAOF,QA6HXG,QAnHE,SAAC3B,GACD,UAAdA,EAAM4B,KACW,KAAfnD,IACFjB,EAAYiB,GAAY,GACxBC,EAAc,QAiHJ,wBACE8B,UAAU,iJACVqB,UAAWpD,EACX8C,QAAQ,YACRO,MAAM,UACNC,QAjIQ,WACL,KAAftD,IACFjB,EAAYiB,GAAY,GACxBC,EAAc,MAyHF,wBAYJ,sBAAK8B,UAAU,kBAAf,UACE,qBAAKA,UAAU,gDAAf,gDAGA,8BACE,qBAAKA,UAAU,4CAAf,SACE,uBACEA,UAAU,yFACVxD,GAAG,UACHoE,KAAK,OACLC,MAAM,UACNC,YAAY,iBACZC,QAAQ,WACRC,MAAO9D,EACP+D,SAAU,SAACzB,GAAD,OAAWf,EAAYe,EAAM0B,OAAOF,QAC9CQ,SAAU,WACRhE,EAAWN,GACX4B,GAAU,UAKlB,wBACEkB,UAAU,wHACVe,QAAQ,YACRO,MAAM,UACNC,QAAS,WACP/D,EAAWN,GACX4B,GAAU,GACV9B,EAAY,GAAD,OACNE,EADM,qCAET,IATN,0BAiBJ,qBAAKuE,IAAK/C,eC5OtBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BnH,M","file":"static/js/main.24706b42.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_MESSAGE_EVENT = \"new-message-event\";\nconst SOCKET_SERVER_URL = `https://${process.env.REACT_APP_API_ENDPOINT}`;\n\nconst useChatRoom = () => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(new Set());\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n    socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        isOwner: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(\"disconnect\", () => {\n      users.forEach((ele) => {\n        if (ele.id === socketRef.current.id) {\n          users.delete(ele);\n          setUsers(users);\n          setMessages((messages) => [\n            ...messages,\n            {\n              body: `${socketRef.current.name} disconnected`,\n              senderId: socketRef.current.id,\n              name: \"\",\n              system: true,\n            },\n          ]);\n        }\n      });\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (messageBody, system) => {\n    let userName = Array.from(users).filter(\n      (ele) => ele.id === socketRef.current.id\n    );\n    if (userName.length) {\n      userName = userName[0];\n    }\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      name: userName.name,\n      system: system,\n    });\n  };\n\n  const createUser = (name) => {\n    setUsers(\n      (users) => new Set([...users, { name: name, id: socketRef.current.id }])\n    );\n  };\n\n  return { messages, sendMessage, createUser };\n};\n\nexport default useChatRoom;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport tw from \"twin.macro\";\nimport useChat from \"./useChatRoom\";\n\nexport const Input = tw.input`\n  px-4\n  py-2\n  placeholder-gray-500\n  w-auto\n  lg:mx-auto\n  focus:ring-primary-100\n  focus:border-primary-500\n  border-gray-400\n  border-width[1px]\n  border-solid\n  rounded-md\n  shadow-xs\n`;\nexport const InputTextLeft = tw(Input)`text-left py-2`;\nexport const PrimaryButton = ({ className = \"\", children, ...rest }) => {\n  return (\n    <Button\n      className={`bg-primary-500 hover:bg-primary-300 text-white`}\n      {...rest}\n      data-testid=\"btn\"\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const Button = ({ className = \"\", children, ...rest }) => {\n  return (\n    <button\n      className={`py-2 px-4 focus:outline-none ring-opacity-75 ring-primary-400 focus:ring text-lg rounded-md`}\n      {...rest}\n      data-testid=\"btn\"\n    >\n      {children}\n    </button>\n  );\n};\n\nconst url = `https://${process.env.REACT_APP_API_ENDPOINT}/lichesstv`;\n\nconst Room = () => {\n  const {\n    messages,\n    sendMessage,\n    createUser,\n    loggedIn,\n    setLoggedIn,\n  } = useChat();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [FEN, setFEN] = useState([]);\n  const [black, setBlack] = useState(\"\");\n  const [white, setWhite] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const messageRef = useRef();\n  const [listening, setListening] = useState(false);\n  const [logged, setLogged] = useState(false);\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (newMessage !== \"\") {\n      sendMessage(newMessage, false);\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleKeyUp = (event) => {\n    if (event.key === \"Enter\") {\n      if (newMessage !== \"\") {\n        sendMessage(newMessage, false);\n        setNewMessage(\"\");\n      }\n    }\n  };\n\n  const createPlayerNames = (user, setPlayer) => {\n    let username = '';\n    if (user.user.name) {\n      if (user.user.title) {\n        username = user.user.title + \" \" + user.user.name + \" \" + user.rating;\n      } else {\n        username = user.user.name + \" \" + user.rating;\n      }\n      setPlayer(username);\n    }\n  };\n\n  useEffect(() => messageRef.current.scrollIntoView({ behavior: \"smooth\" }));\n\n  useEffect(() => {\n    if (!listening) {\n      const source = new EventSource(url);\n      source.onmessage = (event) => {\n        const parsedData = JSON.parse(event.data);\n        setFEN([parsedData.d.fen]);\n        if (parsedData.d.players) {\n          createPlayerNames(parsedData.d.players[0], setWhite)\n          createPlayerNames(parsedData.d.players[1], setBlack)\n          sendMessage(\n            `${parsedData.d.players[0].user.name} (white) VS. ${parsedData.d.players[1].user.name} (black)`,\n            true\n          );\n          if (parsedData.d.id) {\n            sendMessage(\n              `Game in progress at https://lichess.org/${parsedData.d.id}`,\n              true\n            );\n          }\n        }\n      };\n      setListening(true);\n    }\n  }, [listening, FEN]);\n\n  return (\n    <div className=\"w-screen max-h-screen h-screen ml-auto bg-gray-900 overflow-hidden\">\n      <div className=\"h-full max-h-full flex flex-col xl:items-stretch xl:flex-row overflow-hidden\">\n        <div className=\"sm:mt-auto overflow-hidden m-auto\">\n          <div className=\"font-medium md:text-sm text-xs text-white max-w-70 text-left break-all\">\n            FEN: {FEN}\n          </div>\n          <div className=\"m-auto\">\n            <div className=\"font-medium md:text-2xl text-lg my-1 text-white\">\n              {black}\n            </div>\n            <div className=\"m-auto\">\n              <Chessboard\n                position={FEN[0]}\n                transitionDuration={100}\n                showNotation={false}\n                calcWidth={(size) =>\n                  size.screenWidth < 1440\n                    ? (size.screenHeight / 100) * 46\n                    : size.screenWidth > 1440\n                    ? (size.screenHeight / 100) * 70\n                    : (screen.width / 100) * 100\n                }\n              />\n            </div>\n            <div className=\"font-medium md:text-2xl text-lg my-1 text-white\">\n              {\" \"}\n              {white}\n            </div>\n          </div>\n        </div>\n        <div className=\"rounded-lg h-full xl:w-2/6 xl:max-h-full max-h-4/12 w-full max-w-full xl:max-w-2/6 pb-14 bg-gray-900 ml-auto\">\n          <div className=\"h-full ml-1 mt-1 overflow-y-auto\">\n            {logged === true ? (\n              <>\n                <ol>\n                  {messages.map((message, i) => (\n                    <li key={i}>\n                      {message.system === true ? (\n                        <div className=\"text-center text-gray-500 text-sm\">\n                          {message.body}\n                        </div>\n                      ) : (\n                        <span className=\"text-left text-white text-sm flex\">\n                          {message.name ? (\n                            <div className=\"font-bold text-primary-400 mr-1\">\n                              {message.name}:\n                            </div>\n                          ) : (\n                            <>{\"\"}</>\n                          )}\n                          {message.body}\n                        </span>\n                      )}\n                    </li>\n                  ))}\n                </ol>\n                <div className=\"xl:w-30% px-auto w-99 bottom-1 absolute\">\n                  <input\n                    className=\"w-full h-10 pl-3 pr-8 text-base placeholder-gray-600 border rounded-lg focus:shadow-outline\"\n                    id=\"message\"\n                    type=\"text\"\n                    label=\"Message\"\n                    placeholder=\"enter message here\"\n                    variant=\"outlined\"\n                    value={newMessage}\n                    onChange={handleNewMessageChange}\n                    onKeyUp={handleKeyUp}\n                  />\n                  <button\n                    className=\"absolute inset-y-0 h-10 right-0 flex items-center px-4 font-bold text-white bg-purple-800 rounded-r-lg hover:bg-purple-900 focus:bg-purple-900\"\n                    disabled={!newMessage}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleSendMessage}\n                  >\n                    Send\n                  </button>\n                </div>\n              </>\n            ) : (\n              <div className=\"m-auto xl:pt-12\">\n                <div className=\"font-bold text-white text-center text-lg px-4\">\n                  Create a username to join the chat\n                </div>\n                <div>\n                  <div className=\"xl:w-full w-80 overflow-hidden p-4 m-auto\">\n                    <input\n                      className=\"w-full h-10 pl-3 text-base placeholder-gray-600 border rounded-lg focus:shadow-outline\"\n                      id=\"message\"\n                      type=\"text\"\n                      label=\"Message\"\n                      placeholder=\"enter username\"\n                      variant=\"outlined\"\n                      value={userName}\n                      onChange={(event) => setUserName(event.target.value)}\n                      onSubmit={() => {\n                        createUser(userName);\n                        setLogged(true);\n                      }}\n                    />\n                  </div>\n                </div>\n                <button\n                  className=\"h-12 m-auto flex items-center px-4 font-bold text-white bg-green-500 rounded-lg hover:bg-green-600 focus:bg-green-600\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    createUser(userName);\n                    setLogged(true);\n                    sendMessage(\n                      `${userName} just joined the party! Welcome!`,\n                      true\n                    );\n                  }}\n                >\n                  Join Chat\n                </button>\n              </div>\n            )}\n            <div ref={messageRef}></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Room;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Room from \"./Room\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Room />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
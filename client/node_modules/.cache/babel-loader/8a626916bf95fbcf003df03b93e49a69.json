{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useTyping = () => {\n  _s();\n\n  const [isTyping, setIsTyping] = useState(false);\n  const [isKeyPressed, setIsKeyPressed] = useState(false);\n  const [countdown, setCountdown] = useState(5);\n\n  const startTyping = () => {\n    setIsKeyPressed(true);\n    setCountdown(5);\n    setIsTyping(true);\n  };\n\n  const stopTyping = () => {\n    setIsKeyPressed(false);\n  };\n\n  const cancelTyping = () => {\n    setCountdown(0);\n  };\n\n  useEffect(() => {\n    let interval;\n\n    if (!isKeyPressed) {\n      interval = setInterval(() => {\n        setCountdown(c => c - 1);\n      }, 1000);\n    } else if (isKeyPressed || countdown === 0) {\n      clearInterval(interval);\n    }\n\n    if (countdown === 0) {\n      setIsTyping(false);\n    }\n\n    return () => clearInterval(interval);\n  }, [isKeyPressed, countdown]);\n  return {\n    isTyping,\n    startTyping,\n    stopTyping,\n    cancelTyping\n  };\n};\n\n_s(useTyping, \"6sJ8X6nbWb5eMWKqTgeLno1qYJg=\");\n\nexport default useTyping;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useTyping.js"],"names":["useEffect","useState","useTyping","isTyping","setIsTyping","isKeyPressed","setIsKeyPressed","countdown","setCountdown","startTyping","stopTyping","cancelTyping","interval","setInterval","c","clearInterval"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMQ,WAAW,GAAG,MAAM;AACxBH,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAJD;;AAMA,QAAMM,UAAU,GAAG,MAAM;AACvBJ,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD;;AAIA,QAAMK,YAAY,GAAG,MAAM;AACzBH,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,QAAJ;;AACA,QAAI,CAACP,YAAL,EAAmB;AACjBO,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BL,QAAAA,YAAY,CAAEM,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAZ;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGD,KAJD,MAIO,IAAIT,YAAY,IAAIE,SAAS,KAAK,CAAlC,EAAqC;AAC1CQ,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD;;AAED,QAAIL,SAAS,KAAK,CAAlB,EAAqB;AACnBH,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAED,WAAO,MAAMW,aAAa,CAACH,QAAD,CAA1B;AACD,GAfQ,EAeN,CAACP,YAAD,EAAeE,SAAf,CAfM,CAAT;AAiBA,SAAO;AAAEJ,IAAAA,QAAF;AAAYM,IAAAA,WAAZ;AAAyBC,IAAAA,UAAzB;AAAqCC,IAAAA;AAArC,GAAP;AACD,CArCD;;GAAMT,S;;AAuCN,eAAeA,SAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useTyping = () => {\n  const [isTyping, setIsTyping] = useState(false);\n  const [isKeyPressed, setIsKeyPressed] = useState(false);\n  const [countdown, setCountdown] = useState(5);\n\n  const startTyping = () => {\n    setIsKeyPressed(true);\n    setCountdown(5);\n    setIsTyping(true);\n  };\n\n  const stopTyping = () => {\n    setIsKeyPressed(false);\n  };\n\n  const cancelTyping = () => {\n    setCountdown(0);\n  };\n\n  useEffect(() => {\n    let interval;\n    if (!isKeyPressed) {\n      interval = setInterval(() => {\n        setCountdown((c) => c - 1);\n      }, 1000);\n    } else if (isKeyPressed || countdown === 0) {\n      clearInterval(interval);\n    }\n\n    if (countdown === 0) {\n      setIsTyping(false);\n    }\n\n    return () => clearInterval(interval);\n  }, [isKeyPressed, countdown]);\n\n  return { isTyping, startTyping, stopTyping, cancelTyping };\n};\n\nexport default useTyping;\n"]},"metadata":{},"sourceType":"module"}
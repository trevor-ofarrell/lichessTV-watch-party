{"ast":null,"code":"var _jsxFileName = \"/home/d9/code/lichessTV-watch-party/client/src/Home.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport _styled from \"@emotion/styled\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\n//import useChat from \"./useChatRoom\";\nimport useChat from \"./useChat\";\nimport useTyping from \"./useTyping\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Input = _styled.input({\n  \"paddingLeft\": \"1rem\",\n  \"paddingRight\": \"1rem\",\n  \"paddingTop\": \"0.5rem\",\n  \"paddingBottom\": \"0.5rem\",\n  \"::placeholder\": {\n    \"--tw-placeholder-opacity\": \"1\",\n    \"color\": \"rgba(160, 174, 192, var(--tw-placeholder-opacity))\"\n  },\n  \"width\": \"auto\",\n  \":focus\": {\n    \"--tw-ring-opacity\": \"1\",\n    \"--tw-ring-color\": \"rgba(162, 115, 255, var(--tw-ring-opacity))\",\n    \"--tw-border-opacity\": \"1\",\n    \"borderColor\": \"rgba(100, 21, 255, var(--tw-border-opacity))\"\n  },\n  \"--tw-border-opacity\": \"1\",\n  \"borderColor\": \"rgba(203, 213, 224, var(--tw-border-opacity))\",\n  \"borderWidth\": \"1px\",\n  \"borderStyle\": \"solid\",\n  \"borderRadius\": \"0.375rem\",\n  \"--tw-shadow\": \"0 0 0 1px rgba(0, 0, 0, 0.05)\",\n  \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n  \"@media (min-width: 1024px)\": {\n    \"marginLeft\": \"auto\",\n    \"marginRight\": \"auto\"\n  }\n});\nexport const InputTextLeft = _styled(Input)({\n  \"textAlign\": \"left\",\n  \"paddingTop\": \"0.5rem\",\n  \"paddingBottom\": \"0.5rem\"\n});\nexport const PrimaryButton = ({\n  className = \"\",\n  children,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    className: `bg-primary-500 hover:bg-primary-300 text-white`,\n    ...rest,\n    \"data-testid\": \"btn\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = PrimaryButton;\nexport const Button = ({\n  className = \"\",\n  children,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `py-2 px-4 focus:outline-none ring-opacity-75 ring-primary-400 focus:ring text-lg rounded-md`,\n    ...rest,\n    \"data-testid\": \"btn\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Button;\n\nconst getWindowDimensions = () => {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};\n\nconst useWindowDimensions = () => {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowDimensions;\n};\n\n_s(useWindowDimensions, \"XalQq70mIWrnM+6Jr3XornfayDc=\");\n\nconst Room = props => {\n  _s2();\n\n  const {\n    roomId\n  } = props.match.params;\n  const {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    createUser\n  } = useChat(roomId);\n  const {\n    isTyping,\n    startTyping,\n    stopTyping,\n    cancelTyping\n  } = useTyping();\n  const {\n    height,\n    width\n  } = useWindowDimensions();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [FEN, setFEN] = useState([]);\n  const [black, setBlack] = useState(\"\");\n  const [white, setWhite] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const messageRef = useRef();\n  const [listening, setListening] = useState(false);\n  const [logged, setLogged] = useState(false);\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = event => {\n    event.preventDefault();\n    cancelTyping();\n\n    if (newMessage !== \"\") {\n      sendMessage(newMessage, false);\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleKeyUp = event => {\n    if (event.key === \"Enter\") {\n      if (newMessage !== \"\") {\n        sendMessage(newMessage, false);\n        setNewMessage(\"\");\n      }\n    }\n  };\n\n  const createPlayerNames = (user, setPlayer) => {\n    let username = \"\";\n\n    if (user.user.name) {\n      if (user.user.title) {\n        username = user.user.title + \" \" + user.user.name + \" \" + user.rating;\n      } else {\n        username = user.user.name + \" \" + user.rating;\n      }\n\n      setPlayer(username);\n    }\n  };\n\n  useEffect(() => messageRef.current.scrollIntoView({\n    behavior: \"smooth\"\n  }));\n  useEffect(() => {\n    if (!listening) {\n      //const url = `https://${process.env.REACT_APP_API_ENDPOINT}/lichesstv`;\n      const url = `http://localhost:3030/lichesstv`;\n      const source = new EventSource(url);\n\n      source.onmessage = event => {\n        const parsedData = JSON.parse(event.data);\n        setFEN([parsedData.d.fen]);\n\n        if (parsedData.d.players) {\n          createPlayerNames(parsedData.d.players[0], setWhite);\n          createPlayerNames(parsedData.d.players[1], setBlack);\n          sendMessage(`${parsedData.d.players[0].user.name} (white) VS. ${parsedData.d.players[1].user.name} (black)`, true);\n\n          if (parsedData.d.id) {\n            sendMessage(`Game in progress at https://lichess.org/${parsedData.d.id}`, true);\n          }\n        }\n      };\n\n      setListening(true);\n    }\n  }, [listening, FEN]);\n  useEffect(() => {\n    if (isTyping) startTypingMessage();else stopTypingMessage();\n  }, [isTyping]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: height,\n      width: width\n    },\n    className: \"ml-auto bg-gray-900 overflow-hidden\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Room, \"WrX9AXzg+6WtBGG/yKOrkHs5cgg=\", false, function () {\n  return [useChat, useTyping, useWindowDimensions];\n});\n\n_c3 = Room;\nexport default Room;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PrimaryButton\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"Room\");","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/Home.jsx"],"names":["React","useRef","useState","useEffect","Chessboard","useChat","useTyping","Input","tw","input","InputTextLeft","PrimaryButton","className","children","rest","Button","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","Room","props","roomId","match","params","messages","user","users","typingUsers","sendMessage","startTypingMessage","stopTypingMessage","createUser","isTyping","startTyping","stopTyping","cancelTyping","newMessage","setNewMessage","FEN","setFEN","black","setBlack","white","setWhite","userName","setUserName","messageRef","listening","setListening","logged","setLogged","handleNewMessageChange","event","target","value","handleSendMessage","preventDefault","handleKeyUp","key","createPlayerNames","setPlayer","username","name","title","rating","current","scrollIntoView","behavior","url","source","EventSource","onmessage","parsedData","JSON","parse","data","d","fen","players","id"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport tw from \"twin.macro\";\n//import useChat from \"./useChatRoom\";\nimport useChat from \"./useChat\";\nimport useTyping from \"./useTyping\";\n\nexport const Input = tw.input`\n  px-4\n  py-2\n  placeholder-gray-500\n  w-auto\n  lg:mx-auto\n  focus:ring-primary-100\n  focus:border-primary-500\n  border-gray-400\n  border-width[1px]\n  border-solid\n  rounded-md\n  shadow-xs\n`;\n\nexport const InputTextLeft = tw(Input)`text-left py-2`;\n\nexport const PrimaryButton = ({ className = \"\", children, ...rest }) => {\n  return (\n    <Button\n      className={`bg-primary-500 hover:bg-primary-300 text-white`}\n      {...rest}\n      data-testid=\"btn\"\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const Button = ({ className = \"\", children, ...rest }) => {\n  return (\n    <button\n      className={`py-2 px-4 focus:outline-none ring-opacity-75 ring-primary-400 focus:ring text-lg rounded-md`}\n      {...rest}\n      data-testid=\"btn\"\n    >\n      {children}\n    </button>\n  );\n};\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nconst Room = (props) => {\n  const { roomId } = props.match.params;\n  const {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    createUser,\n  } = useChat(roomId);\n  const { isTyping, startTyping, stopTyping, cancelTyping } = useTyping();\n\n  const { height, width } = useWindowDimensions();\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [FEN, setFEN] = useState([]);\n  const [black, setBlack] = useState(\"\");\n  const [white, setWhite] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const messageRef = useRef();\n  const [listening, setListening] = useState(false);\n  const [logged, setLogged] = useState(false);\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = (event) => {\n    event.preventDefault();\n    cancelTyping();\n    if (newMessage !== \"\") {\n      sendMessage(newMessage, false);\n      setNewMessage(\"\");\n    }\n  };\n\n  const handleKeyUp = (event) => {\n    if (event.key === \"Enter\") {\n      if (newMessage !== \"\") {\n        sendMessage(newMessage, false);\n        setNewMessage(\"\");\n      }\n    }\n  };\n\n  const createPlayerNames = (user, setPlayer) => {\n    let username = \"\";\n    if (user.user.name) {\n      if (user.user.title) {\n        username = user.user.title + \" \" + user.user.name + \" \" + user.rating;\n      } else {\n        username = user.user.name + \" \" + user.rating;\n      }\n      setPlayer(username);\n    }\n  };\n\n  useEffect(() => messageRef.current.scrollIntoView({ behavior: \"smooth\" }));\n\n  useEffect(() => {\n    if (!listening) {\n      //const url = `https://${process.env.REACT_APP_API_ENDPOINT}/lichesstv`;\n      const url = `http://localhost:3030/lichesstv`;\n      const source = new EventSource(url);\n      source.onmessage = (event) => {\n        const parsedData = JSON.parse(event.data);\n        setFEN([parsedData.d.fen]);\n        if (parsedData.d.players) {\n          createPlayerNames(parsedData.d.players[0], setWhite);\n          createPlayerNames(parsedData.d.players[1], setBlack);\n          sendMessage(\n            `${parsedData.d.players[0].user.name} (white) VS. ${parsedData.d.players[1].user.name} (black)`,\n            true\n          );\n          if (parsedData.d.id) {\n            sendMessage(\n              `Game in progress at https://lichess.org/${parsedData.d.id}`,\n              true\n            );\n          }\n        }\n      };\n      setListening(true);\n    }\n  }, [listening, FEN]);\n\n  useEffect(() => {\n    if (isTyping) startTypingMessage();\n    else stopTypingMessage();\n  }, [isTyping]);\n\n  return (\n    <div\n      style={{ height: height, width: width }}\n      className=\"ml-auto bg-gray-900 overflow-hidden\"\n    >\n     \n    </div>\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}
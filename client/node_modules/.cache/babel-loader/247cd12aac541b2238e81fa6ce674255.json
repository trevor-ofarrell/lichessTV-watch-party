{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:3030\";\n\nconst useChat = (roomId, name) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({\n        name\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(`${SOCKET_SERVER_URL}/rooms/${roomId}/users`);\n      const result = response.data.users;\n      console.log(result);\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(`${SOCKET_SERVER_URL}/rooms/${roomId}/messages`);\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId,\n        name: user.name\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, user => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      console.log(user, \"user\");\n      setUsers(users => [...users, user]);\n      sendMessage(`${user.name} just joined the party! Welcome!`, true);\n    });\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, user => {\n      setUsers(users => users.filter(u => u.id !== user.id));\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === `${socketRef.current.id}${user.name}`,\n        name: user.name\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => [...users, user]);\n      }\n    });\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => users.filter(u => u.name !== user.name));\n      }\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    if (system) socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: `${socketRef.current.id}${user.name}`,\n      user: user,\n      system: system\n    });\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const addUser = name => {\n    const user = {\n      name\n    };\n    setUsers(users => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser\n  };\n};\n\n_s(useChat, \"0mlFRfw3aRlxVCNNENXQJugeACA=\");\n\nexport default useChat;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","USER_JOIN_CHAT_EVENT","USER_LEAVE_CHAT_EVENT","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","name","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","setUser","socketRef","fetchUser","fetchUsers","response","get","result","data","console","log","fetchMessages","current","query","on","id","sendMessage","filter","u","message","incomingMessage","ownedByCurrentUser","senderId","typingInfo","disconnect","messageBody","system","emit","body","startTypingMessage","stopTypingMessage","addUser"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:3030\";\n\nconst useChat = (roomId, name) => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({ name });\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/users`\n      );\n      const result = response.data.users;\n      console.log(result);\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/messages`\n      );\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId, name: user.name },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, (user) => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      console.log(user, \"user\");\n      setUsers((users) => [...users, user]);\n      sendMessage(`${user.name} just joined the party! Welcome!`, true);\n    });\n\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, (user) => {\n      setUsers((users) => users.filter((u) => u.id !== user.id));\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === `${socketRef.current.id}${user.name}`,\n        name: user.name,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => [...users, user]);\n      }\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n      }\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    if (system)\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: `${socketRef.current.id}${user.name}`,\n      user: user,\n      system: system,\n    });\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const addUser = (name) => {\n    const user = { name };\n    setUsers((users) => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser,\n  };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}
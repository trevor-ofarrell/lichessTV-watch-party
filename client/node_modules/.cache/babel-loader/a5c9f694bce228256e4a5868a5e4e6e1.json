{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\n\nconst useChat = (roomId, name) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({\n        name,\n        color\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/users`);\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/messages`);\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    socketRef.current = socketIOClient(process.env.REACT_APP_API_ENDPOINT, {\n      query: {\n        roomId,\n        name: user.name\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, user => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      setUsers(users => [...users, user]);\n    });\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, user => {\n      setUsers(users => users.filter(u => u.id !== user.id));\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === `${socketRef.current.id}${user.name}`\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => [...users, user]);\n      }\n    });\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => users.filter(u => u.name !== user.name));\n      }\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n\n    if (system === true) {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: socketRef.current.id,\n        name: user === null || user === void 0 ? void 0 : user.name,\n        system: system\n      });\n    } else {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: `${socketRef.current.id}${user.name}`,\n        user: user,\n        name: user === null || user === void 0 ? void 0 : user.name,\n        color: user === null || user === void 0 ? void 0 : user.color,\n        system: system\n      });\n    }\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const addUser = (name, color) => {\n    const user = {\n      name,\n      color\n    };\n    setUsers(users => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser\n  };\n};\n\n_s(useChat, \"0mlFRfw3aRlxVCNNENXQJugeACA=\");\n\nexport default useChat;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","USER_JOIN_CHAT_EVENT","USER_LEAVE_CHAT_EVENT","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","useChat","roomId","name","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","setUser","socketRef","fetchUser","color","fetchUsers","response","get","process","env","REACT_APP_API_ENDPOINT","result","data","fetchMessages","current","query","on","console","log","id","filter","u","message","incomingMessage","ownedByCurrentUser","senderId","typingInfo","disconnect","sendMessage","messageBody","system","emit","body","startTypingMessage","stopTypingMessage","addUser"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\n\nconst useChat = (roomId, name) => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({ name, color });\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/users`\n      );\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/messages`\n      );\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    socketRef.current = socketIOClient(process.env.REACT_APP_API_ENDPOINT, {\n      query: { roomId, name: user.name },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, (user) => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      setUsers((users) => [...users, user]);\n    });\n\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, (user) => {\n      setUsers((users) => users.filter((u) => u.id !== user.id));\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser:\n          message.senderId === `${socketRef.current.id}${user.name}`,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => [...users, user]);\n      }\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n      }\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    if (system === true) {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: socketRef.current.id,\n        name: user?.name,\n        system: system,\n      });\n    } else {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: `${socketRef.current.id}${user.name}`,\n        user: user,\n        name: user?.name,\n        color: user?.color,\n        system: system,\n      });\n    }\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const addUser = (name, color) => {\n    const user = { name, color };\n    setUsers((users) => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser,\n  };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\n\nconst useChat = (roomId, name) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  const selectRandomColor = () => {\n    const colors = ['text-green-500', 'text-purple-500', 'text-pink-500', 'text-red-500', 'text-red-700', 'text-blue-500', 'text-blue-300', 'text-green-400', 'text-pink-700', 'text-primary-500', 'text-orange-500'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({\n        name,\n        color: selectRandomColor()\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/users`);\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/messages`);\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    socketRef.current = socketIOClient(process.env.REACT_APP_API_ENDPOINT, {\n      query: {\n        roomId,\n        name: user.name\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, user => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      setUsers(users => [...users, user]);\n    });\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, user => {\n      setUsers(users => users.filter(u => u.id !== user.id));\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === `${socketRef.current.id}${user.name}`\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => [...users, user]);\n      }\n    });\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers(users => users.filter(u => u.name !== user.name));\n      }\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n\n    if (system === true) {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: socketRef.current.id,\n        name: user === null || user === void 0 ? void 0 : user.name,\n        system: system\n      });\n    } else {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: `${socketRef.current.id}${user.name}`,\n        user: user,\n        name: user === null || user === void 0 ? void 0 : user.name,\n        color: user === null || user === void 0 ? void 0 : user.color,\n        system: system\n      });\n    }\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const addUser = name => {\n    const user = {\n      name\n    };\n    setUsers(users => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser\n  };\n};\n\n_s(useChat, \"0mlFRfw3aRlxVCNNENXQJugeACA=\");\n\nexport default useChat;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","USER_JOIN_CHAT_EVENT","USER_LEAVE_CHAT_EVENT","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","useChat","roomId","name","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","setUser","socketRef","selectRandomColor","colors","Math","floor","random","length","fetchUser","color","fetchUsers","response","get","process","env","REACT_APP_API_ENDPOINT","result","data","fetchMessages","current","query","on","console","log","id","filter","u","message","incomingMessage","ownedByCurrentUser","senderId","typingInfo","disconnect","sendMessage","messageBody","system","emit","body","startTypingMessage","stopTypingMessage","addUser"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\n\nconst useChat = (roomId, name) => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  const selectRandomColor = () => {\n    const colors = [\n      'text-green-500',\n      'text-purple-500',\n      'text-pink-500',\n      'text-red-500',\n      'text-red-700',\n      'text-blue-500',\n      'text-blue-300',\n      'text-green-400',\n      'text-pink-700',\n      'text-primary-500',\n      'text-orange-500',\n    ]\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  useEffect(() => {\n    const fetchUser = () => {\n      setUser({ name, color: selectRandomColor()});\n    };\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/users`\n      );\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(\n        `${process.env.REACT_APP_API_ENDPOINT}/rooms/${roomId}/messages`\n      );\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    socketRef.current = socketIOClient(process.env.REACT_APP_API_ENDPOINT, {\n      query: { roomId, name: user.name },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, (user) => {\n      if (user.id === `${socketRef.current.id}${user.name}`) return;\n      setUsers((users) => [...users, user]);\n    });\n\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, (user) => {\n      setUsers((users) => users.filter((u) => u.id !== user.id));\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser:\n          message.senderId === `${socketRef.current.id}${user.name}`,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => [...users, user]);\n      }\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== `${socketRef.current.id}${user.name}`) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n      }\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    if (system === true) {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: socketRef.current.id,\n        name: user?.name,\n        system: system,\n      });\n    } else {\n      socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n        body: messageBody,\n        senderId: `${socketRef.current.id}${user.name}`,\n        user: user,\n        name: user?.name,\n        color: user?.color,\n        system: system,\n      });\n    }\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const addUser = (name) => {\n    const user = { name};\n    setUsers((users) => [...users, user]);\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    addUser,\n  };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}
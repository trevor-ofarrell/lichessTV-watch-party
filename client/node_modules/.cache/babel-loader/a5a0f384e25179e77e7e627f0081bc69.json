{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:3030\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n  const createUser = name => {\n    setUsers(users => new Set([...users, {\n      name: name,\n      id: socketRef.current.id\n    }]));\n    setUser({\n      name: name,\n      id: socketRef.current.id\n    });\n  };\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail\n      });\n    };\n\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(`${SOCKET_SERVER_URL}/rooms/${roomId}/users`);\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(`${SOCKET_SERVER_URL}/rooms/${roomId}/messages`);\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId,\n        name: user.name\n      }\n    });\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, user => {\n      if (user.id === socketRef.current.id) return;\n      setUsers(users => [...users, user]);\n    });\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, user => {\n      setUsers(users => users.filter(u => u.id !== user.id));\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers(users => [...users, user]);\n      }\n    });\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, typingInfo => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers(users => users.filter(u => u.name !== user.name));\n      }\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user,\n      system: system\n    });\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user\n    });\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    createUser\n  };\n};\n\n_s(useChat, \"0mlFRfw3aRlxVCNNENXQJugeACA=\");\n\nexport default useChat;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","axios","USER_JOIN_CHAT_EVENT","USER_LEAVE_CHAT_EVENT","NEW_CHAT_MESSAGE_EVENT","START_TYPING_MESSAGE_EVENT","STOP_TYPING_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","users","setUsers","typingUsers","setTypingUsers","user","setUser","socketRef","createUser","name","Set","id","current","fetchUser","response","get","result","data","results","first","picture","thumbnail","fetchUsers","fetchMessages","query","on","console","log","filter","u","message","incomingMessage","ownedByCurrentUser","senderId","typingInfo","disconnect","sendMessage","messageBody","system","emit","body","startTypingMessage","stopTypingMessage"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst USER_JOIN_CHAT_EVENT = \"USER_JOIN_CHAT_EVENT\";\nconst USER_LEAVE_CHAT_EVENT = \"USER_LEAVE_CHAT_EVENT\";\nconst NEW_CHAT_MESSAGE_EVENT = \"NEW_CHAT_MESSAGE_EVENT\";\nconst START_TYPING_MESSAGE_EVENT = \"START_TYPING_MESSAGE_EVENT\";\nconst STOP_TYPING_MESSAGE_EVENT = \"STOP_TYPING_MESSAGE_EVENT\";\nconst SOCKET_SERVER_URL = \"http://localhost:3030\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [user, setUser] = useState();\n  const socketRef = useRef();\n\n\n  const createUser = (name) => {\n    setUsers(\n      (users) => new Set([...users, { name: name, id: socketRef.current.id }])\n    );\n    setUser(\n        { name: name, id: socketRef.current.id }\n    );\n  };\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const response = await axios.get(\"https://api.randomuser.me/\");\n      const result = response.data.results[0];\n      setUser({\n        name: result.name.first,\n        picture: result.picture.thumbnail,\n      });\n    };\n\n    fetchUser();\n  }, []);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/users`\n      );\n      const result = response.data.users;\n      setUsers(result);\n    };\n\n    fetchUsers();\n  }, [roomId]);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const response = await axios.get(\n        `${SOCKET_SERVER_URL}/rooms/${roomId}/messages`\n      );\n      const result = response.data.messages;\n      setMessages(result);\n    };\n\n    fetchMessages();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (!user) {\n      return;\n    }\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId, name: user.name },\n    });\n\n    socketRef.current.on(\"connect\", () => {\n      console.log(socketRef.current.id);\n    });\n\n    socketRef.current.on(USER_JOIN_CHAT_EVENT, (user) => {\n      if (user.id === socketRef.current.id) return;\n      setUsers((users) => [...users, user]);\n    });\n\n    socketRef.current.on(USER_LEAVE_CHAT_EVENT, (user) => {\n      setUsers((users) => users.filter((u) => u.id !== user.id));\n    });\n\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n\n    socketRef.current.on(START_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => [...users, user]);\n      }\n    });\n\n    socketRef.current.on(STOP_TYPING_MESSAGE_EVENT, (typingInfo) => {\n      if (typingInfo.senderId !== socketRef.current.id) {\n        const user = typingInfo.user;\n        setTypingUsers((users) => users.filter((u) => u.name !== user.name));\n      }\n    });\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, user]);\n\n  const sendMessage = (messageBody, system) => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      user: user,\n      system: system,\n    });\n  };\n\n  const startTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(START_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  const stopTypingMessage = () => {\n    if (!socketRef.current) return;\n    socketRef.current.emit(STOP_TYPING_MESSAGE_EVENT, {\n      senderId: socketRef.current.id,\n      user,\n    });\n  };\n\n  return {\n    messages,\n    user,\n    users,\n    typingUsers,\n    sendMessage,\n    startTypingMessage,\n    stopTypingMessage,\n    createUser,\n  };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}
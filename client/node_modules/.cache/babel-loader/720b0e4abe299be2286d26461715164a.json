{"ast":null,"code":"var Options = require('options'),\n    util = require('util'),\n    url = require('url'),\n    querystring = require('querystring'),\n    events = require('events'),\n    SSEClient = require('./sseclient');\n\nRegExp.quote = function (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n};\n\nmodule.exports = SSE;\nmodule.exports.Client = SSEClient;\n\nfunction SSE(httpServer, options) {\n  options = new Options({\n    path: '/sse',\n    verifyRequest: null\n  }).merge(options);\n  this.server = httpServer;\n  var oldListeners = this.server.listeners('request');\n  this.server.removeAllListeners('request');\n  var self = this;\n  this.server.on('request', function (req, res) {\n    var u = url.parse(req.url);\n    var pathname = u.pathname.replace(/^\\/{2,}/, '/');\n\n    if (self.matchesPath(pathname, options.value.path) && (options.value.verifyRequest == null || options.value.verifyRequest(req))) {\n      self.handleRequest(req, res, u.query);\n    } else {\n      for (var i = 0, l = oldListeners.length; i < l; ++i) {\n        oldListeners[i].call(self.server, req, res);\n      }\n    }\n  });\n}\n\nutil.inherits(SSE, events.EventEmitter);\n\nSSE.prototype.handleRequest = function (req, res, query) {\n  var client = new SSEClient(req, res);\n  client.initialize();\n  this.emit('connection', client, querystring.parse(query));\n};\n\nSSE.prototype.matchesPath = function (queryPath, matchPath) {\n  var match = RegExp.quote(matchPath).replace('\\\\*', '.*');\n  return RegExp('^' + match + '$').test(queryPath);\n};","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/node_modules/sse/lib/sse.js"],"names":["Options","require","util","url","querystring","events","SSEClient","RegExp","quote","str","replace","module","exports","SSE","Client","httpServer","options","path","verifyRequest","merge","server","oldListeners","listeners","removeAllListeners","self","on","req","res","u","parse","pathname","matchesPath","value","handleRequest","query","i","l","length","call","inherits","EventEmitter","prototype","client","initialize","emit","queryPath","matchPath","match","test"],"mappings":"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","sourcesContent":["var Options = require('options')\n  , util = require('util')\n  , url = require('url')\n  , querystring = require('querystring')\n  , events = require('events')\n  , SSEClient = require('./sseclient');\n\nRegExp.quote = function(str) {\n  return (str+'').replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n};\n\nmodule.exports = SSE;\nmodule.exports.Client = SSEClient;\n\nfunction SSE(httpServer, options) {\n  options = new Options({\n    path          : '/sse',\n    verifyRequest : null\n  }).merge(options);\n  this.server = httpServer;\n  var oldListeners = this.server.listeners('request');\n  this.server.removeAllListeners('request');\n  var self = this;\n  this.server.on('request', function(req, res) {\n    var u = url.parse(req.url);\n    var pathname = u.pathname.replace(/^\\/{2,}/, '/');\n    if (self.matchesPath(pathname, options.value.path) && (options.value.verifyRequest == null || options.value.verifyRequest(req))) {\n      self.handleRequest(req, res, u.query);\n    }\n    else {\n      for (var i = 0, l = oldListeners.length; i < l; ++i) {\n        oldListeners[i].call(self.server, req, res);\n      }\n    }\n  });\n}\n\nutil.inherits(SSE, events.EventEmitter);\n\nSSE.prototype.handleRequest = function(req, res, query) {\n  var client = new SSEClient(req, res);\n  client.initialize();\n  this.emit('connection', client, querystring.parse(query));\n}\n\nSSE.prototype.matchesPath = function(queryPath, matchPath) {\n  var match = RegExp.quote(matchPath).replace('\\\\*', '.*');\n  return RegExp('^' + match + '$').test(queryPath);\n}\n"]},"metadata":{},"sourceType":"script"}
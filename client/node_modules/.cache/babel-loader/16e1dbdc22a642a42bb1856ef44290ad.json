{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst getWindowDimensions = () => {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n};\n\nconst useWindowDimensions = () => {\n  _s();\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return windowDimensions;\n};\n\n_s(useWindowDimensions, \"XalQq70mIWrnM+6Jr3XornfayDc=\");\n\nexport default useWindowDimensions;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/hooks/WindowDimensions.js"],"names":["useEffect","useState","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAM;AAAEC,IAAAA,UAAU,EAAEC,KAAd;AAAqBC,IAAAA,WAAW,EAAEC;AAAlC,MAA6CC,MAAnD;AACA,SAAO;AACHH,IAAAA,KADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAND;;AAQA,MAAME,mBAAmB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CACpDC,mBAAmB,EADiC,CAAxD;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASW,YAAT,GAAwB;AACxBD,MAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;AACC;;AACDK,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACH,GANQ,EAMN,EANM,CAAT;AAQA,SAAOF,gBAAP;AACH,CAdD;;GAAMD,mB;;AAgBN,eAAeA,mBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n};\n  \nconst useWindowDimensions = () => {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowDimensions;\n};\n\nexport default useWindowDimensions;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from\"/home/d9/code/lichessTV-watch-party/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";var getWindowDimensions=function getWindowDimensions(){var _window=window,width=_window.innerWidth,height=_window.innerHeight;return{width:width,height:height};};var useWindowDimensions=function useWindowDimensions(){var _useState=useState(getWindowDimensions()),_useState2=_slicedToArray(_useState,2),windowDimensions=_useState2[0],setWindowDimensions=_useState2[1];useEffect(function(){function handleResize(){setWindowDimensions(getWindowDimensions());}window.addEventListener(\"resize\",handleResize);return function(){return window.removeEventListener(\"resize\",handleResize);};},[]);return windowDimensions;};export default useWindowDimensions;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/hooks/WindowDimensions.js"],"names":["useEffect","useState","getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener"],"mappings":"iKAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,YAAmDC,MAAnD,CAAoBC,KAApB,SAAQC,UAAR,CAAwCC,MAAxC,SAA2BC,WAA3B,CACA,MAAO,CACHH,KAAK,CAALA,KADG,CAEHE,MAAM,CAANA,MAFG,CAAP,CAIH,CAND,CAQA,GAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,cAAgDP,QAAQ,CACpDC,mBAAmB,EADiC,CAAxD,wCAAOO,gBAAP,eAAyBC,mBAAzB,eAGAV,SAAS,CAAC,UAAM,CACZ,QAASW,CAAAA,YAAT,EAAwB,CACxBD,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB,CACC,CACDC,MAAM,CAACS,gBAAP,CAAwB,QAAxB,CAAkCD,YAAlC,EACA,MAAO,kBAAMR,CAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,CAAqCF,YAArC,CAAN,EAAP,CACH,CANQ,CAMN,EANM,CAAT,CAQA,MAAOF,CAAAA,gBAAP,CACH,CAbD,CAeA,cAAeD,CAAAA,mBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height,\n    };\n};\n  \nconst useWindowDimensions = () => {\n    const [windowDimensions, setWindowDimensions] = useState(\n        getWindowDimensions()\n    );\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener(\"resize\", handleResize);\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowDimensions;\n};\n\nexport default useWindowDimensions;"]},"metadata":{},"sourceType":"module"}
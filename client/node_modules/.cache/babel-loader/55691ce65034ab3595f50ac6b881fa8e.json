{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_MESSAGE_EVENT = \"new-message-event\";\nconst SOCKET_SERVER_URL = `https://${process.env.REACT_APP_API_ENDPOINT}`;\n\nconst useChatRoom = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(new Set());\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n    socketRef.current.on(NEW_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        isOwner: message.senderId === socketRef.current.id\n      };\n      setMessages(messages => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(\"disconnect\", () => {\n      users.forEach(ele => {\n        if (ele.id === socketRef.current.id) {\n          users.delete(ele);\n          setUsers(users);\n          setMessages(messages => [...messages, {\n            body: `${socketRef.current.name} disconnected`,\n            senderId: socketRef.current.id,\n            name: \"\",\n            system: true\n          }]);\n        }\n      });\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (messageBody, system) => {\n    let userName = Array.from(users).filter(ele => ele.id === socketRef.current.id);\n\n    if (userName.length) {\n      userName = userName[0];\n    }\n\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      name: userName.name,\n      system: system\n    });\n  };\n\n  const createUser = name => {\n    setUsers(users => new Set([...users, {\n      name: name,\n      id: socketRef.current.id\n    }]));\n  };\n\n  return {\n    messages,\n    sendMessage,\n    createUser\n  };\n};\n\n_s(useChatRoom, \"fhAuQkIQW3NJSmw9scpRumr6w8E=\");\n\nexport default useChatRoom;","map":{"version":3,"sources":["/home/d9/code/lichessTV-watch-party/client/src/useChatRoom.jsx"],"names":["useEffect","useRef","useState","socketIOClient","NEW_MESSAGE_EVENT","SOCKET_SERVER_URL","process","env","REACT_APP_API_ENDPOINT","useChatRoom","messages","setMessages","users","setUsers","Set","socketRef","current","on","message","incomingMessage","isOwner","senderId","id","forEach","ele","delete","body","name","system","disconnect","sendMessage","messageBody","userName","Array","from","filter","length","emit","createUser"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_MESSAGE_EVENT = \"new-message-event\";\nconst SOCKET_SERVER_URL = `https://${process.env.REACT_APP_API_ENDPOINT}`;\n\nconst useChatRoom = () => {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(new Set());\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL);\n    socketRef.current.on(NEW_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        isOwner: message.senderId === socketRef.current.id,\n      };\n      setMessages((messages) => [...messages, incomingMessage]);\n    });\n    socketRef.current.on(\"disconnect\", () => {\n      users.forEach((ele) => {\n        if (ele.id === socketRef.current.id) {\n          users.delete(ele);\n          setUsers(users);\n          setMessages((messages) => [\n            ...messages,\n            {\n              body: `${socketRef.current.name} disconnected`,\n              senderId: socketRef.current.id,\n              name: \"\",\n              system: true,\n            },\n          ]);\n        }\n      });\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (messageBody, system) => {\n    let userName = Array.from(users).filter(\n      (ele) => ele.id === socketRef.current.id\n    );\n    if (userName.length) {\n      userName = userName[0];\n    }\n    socketRef.current.emit(NEW_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n      name: userName.name,\n      system: system,\n    });\n  };\n\n  const createUser = (name) => {\n    setUsers(\n      (users) => new Set([...users, { name: name, id: socketRef.current.id }])\n    );\n  };\n\n  return { messages, sendMessage, createUser };\n};\n\nexport default useChatRoom;\n"]},"metadata":{},"sourceType":"module"}